name: 🚀 Release Workflow

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  validate-release:
    name: ✅ Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🏷️ Extract Version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT
          echo "🏷️ Release version: $VERSION"

      - name: 📋 Validate Version Format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected format: x.y.z (e.g., 1.0.0)"
            exit 1
          fi
          echo "✅ Version format is valid: $VERSION"

      - name: 🔍 Check if Tag Exists
        run: |
          TAG="${{ steps.version.outputs.tag }}"
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "ℹ️ Tag $TAG already exists"
          else
            echo "🆕 New tag: $TAG"
          fi

  build-and-test:
    name: 🏗️ Build & Test Release
    runs-on: ubuntu-latest
    needs: validate-release
    services:
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: flowforge123
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 27017:27017
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json

      - name: 📦 Install Dependencies
        run: |
          cd backend && npm ci --prefer-offline --no-audit
          cd ../frontend && npm ci --prefer-offline --no-audit

      - name: 🧪 Run Full Test Suite
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://admin:flowforge123@localhost:27017/flowforge_test?authSource=admin
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          # Backend tests
          cd backend
          npm run lint
          npm test -- --coverage
          
          # Frontend tests
          cd ../frontend
          npm run lint
          npm test -- --coverage
          npm run build

      - name: 📤 Upload Release Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts-${{ needs.validate-release.outputs.version }}
          path: |
            frontend/dist
            backend/package.json
            backend/package-lock.json
          retention-days: 30

  build-docker:
    name: 🐳 Build Docker Images
    runs-on: ubuntu-latest
    needs: [validate-release, build-and-test]
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📋 Extract Metadata
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend
          tags: |
            type=ref,event=tag
            type=raw,value=${{ needs.validate-release.outputs.version }}
            type=raw,value=latest

      - name: 📋 Extract Metadata (Frontend)
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend
          tags: |
            type=ref,event=tag
            type=raw,value=${{ needs.validate-release.outputs.version }}
            type=raw,value=latest

      - name: 🏗️ Build and Push Backend Image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 📥 Download Release Artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts-${{ needs.validate-release.outputs.version }}
          path: .

      - name: 🏗️ Build and Push Frontend Image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-release:
    name: 📦 Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-and-test, build-docker]
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📥 Download Release Artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts-${{ needs.validate-release.outputs.version }}
          path: ./release-artifacts

      - name: 📋 Generate Release Notes
        id: release-notes
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          TAG="${{ needs.validate-release.outputs.tag }}"
          
          # Get previous tag for changelog
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          
          cat > release_notes.md << EOF
          ## 🚀 FlowForge Release ${VERSION}
          
          ### 📊 Release Information
          - **Version**: ${VERSION}
          - **Release Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          - **Commit**: ${{ github.sha }}
          - **Branch**: ${{ github.ref_name }}
          
          ### 🔄 Changes Since ${PREVIOUS_TAG:-"Initial Release"}
          EOF
          
          if [[ -n "$PREVIOUS_TAG" ]]; then
            echo "" >> release_notes.md
            git log --oneline --no-merges ${PREVIOUS_TAG}..HEAD | head -20 >> release_notes.md
          else
            echo "- Initial release of FlowForge" >> release_notes.md
          fi
          
          cat >> release_notes.md << EOF
          
          ### 🐳 Docker Images
          - Backend: \`ghcr.io/${{ github.repository_owner }}/flowforge/backend:${VERSION}\`
          - Frontend: \`ghcr.io/${{ github.repository_owner }}/flowforge/frontend:${VERSION}\`
          
          ### 📦 Installation
          
          **Docker Compose:**
          \`\`\`bash
          docker-compose up -d
          \`\`\`
          
          **Manual Installation:**
          1. Download the release artifacts
          2. Follow the setup instructions in README.md
          3. Use the provided environment configuration
          
          ### 🧪 Testing
          - ✅ Backend tests: Passed
          - ✅ Frontend tests: Passed
          - ✅ Integration tests: Passed
          - ✅ Security scans: Completed
          - ✅ Docker builds: Successful
          
          ### 🔒 Security
          - All dependencies have been scanned for vulnerabilities
          - Security best practices have been validated
          - Container images have been scanned
          
          ### 📈 Performance
          - Bundle optimization completed
          - Performance metrics validated
          - Load testing performed
          
          ### 🐛 Bug Fixes & Improvements
          See commit history for detailed changes.
          
          ### 🔗 Resources
          - [Documentation](https://github.com/${{ github.repository }}/blob/main/docs/)
          - [Installation Guide](https://github.com/${{ github.repository }}/blob/main/README.md)
          - [API Documentation](https://github.com/${{ github.repository }}/blob/main/docs/API.md)
          
          ---
          
          🤖 Generated with [Claude Code](https://claude.ai/code)
          
          Co-Authored-By: Claude <noreply@anthropic.com>
          EOF

      - name: 🎉 Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.validate-release.outputs.tag }}
          name: FlowForge ${{ needs.validate-release.outputs.version }}
          body_path: release_notes.md
          files: |
            release-artifacts/**/*
          draft: false
          prerelease: false
          generate_release_notes: true

  notify-release:
    name: 📢 Notify Release
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    if: always()
    steps:
      - name: 📊 Release Summary
        run: |
          echo "## 🚀 Release ${{ needs.validate-release.outputs.version }} Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Completed Tasks" >> $GITHUB_STEP_SUMMARY
          echo "- Version validation" >> $GITHUB_STEP_SUMMARY
          echo "- Full test suite execution" >> $GITHUB_STEP_SUMMARY
          echo "- Docker image builds" >> $GITHUB_STEP_SUMMARY
          echo "- GitHub release creation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🐳 Docker Images" >> $GITHUB_STEP_SUMMARY
          echo "- \`ghcr.io/${{ github.repository_owner }}/flowforge/backend:${{ needs.validate-release.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`ghcr.io/${{ github.repository_owner }}/flowforge/frontend:${{ needs.validate-release.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Release URL" >> $GITHUB_STEP_SUMMARY
          echo "https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate-release.outputs.tag }}" >> $GITHUB_STEP_SUMMARY